/* tslint:disable */
/* eslint-disable */
/**
 * TVmaze api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CastDetail
 */
export interface CastDetail {
    /**
     * 
     * @type {PersonDetail}
     * @memberof CastDetail
     */
    person: PersonDetail;
    /**
     * 
     * @type {CharacterDetail}
     * @memberof CastDetail
     */
    character: CharacterDetail;
    /**
     * 
     * @type {boolean}
     * @memberof CastDetail
     */
    self?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CastDetail
     */
    voice?: boolean;
}
/**
 * 
 * @export
 * @interface CharacterDetail
 */
export interface CharacterDetail {
    /**
     * 
     * @type {number}
     * @memberof CharacterDetail
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof CharacterDetail
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof CharacterDetail
     */
    name: string;
    /**
     * 
     * @type {Image}
     * @memberof CharacterDetail
     */
    image?: Image;
    /**
     * 
     * @type {PersonDetailLinks}
     * @memberof CharacterDetail
     */
    _links?: PersonDetailLinks;
}
/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    timezone: string;
}
/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    medium: string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    original: string;
}
/**
 * 
 * @export
 * @interface Network
 */
export interface Network {
    /**
     * 
     * @type {number}
     * @memberof Network
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    name: string;
    /**
     * 
     * @type {Country}
     * @memberof Network
     */
    country?: Country;
}
/**
 * 
 * @export
 * @interface PersonDetail
 */
export interface PersonDetail {
    /**
     * 
     * @type {number}
     * @memberof PersonDetail
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PersonDetail
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDetail
     */
    name: string;
    /**
     * 
     * @type {Country}
     * @memberof PersonDetail
     */
    country?: Country;
    /**
     * 
     * @type {string}
     * @memberof PersonDetail
     */
    birthday?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDetail
     */
    deathday?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDetail
     */
    gender: string;
    /**
     * 
     * @type {Image}
     * @memberof PersonDetail
     */
    image?: Image;
    /**
     * 
     * @type {PersonDetailLinks}
     * @memberof PersonDetail
     */
    _links?: PersonDetailLinks;
}
/**
 * 
 * @export
 * @interface PersonDetailLinks
 */
export interface PersonDetailLinks {
    /**
     * 
     * @type {ShowDetailLinksSelf}
     * @memberof PersonDetailLinks
     */
    self?: ShowDetailLinksSelf;
}
/**
 * 
 * @export
 * @interface SearchResult
 */
export interface SearchResult {
    /**
     * 
     * @type {number}
     * @memberof SearchResult
     */
    score: number;
    /**
     * 
     * @type {ShowDetail}
     * @memberof SearchResult
     */
    show: ShowDetail;
}
/**
 * 
 * @export
 * @interface Season
 */
export interface Season {
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    url: string;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    number: number;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    episodeOrder?: number;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    premiereDate: string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    endDate: string;
    /**
     * 
     * @type {Network}
     * @memberof Season
     */
    network?: Network;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    webChannel?: string;
    /**
     * 
     * @type {Image}
     * @memberof Season
     */
    image?: Image;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    summary?: string;
    /**
     * 
     * @type {PersonDetailLinks}
     * @memberof Season
     */
    _links?: PersonDetailLinks;
}
/**
 * 
 * @export
 * @interface ShowDetail
 */
export interface ShowDetail {
    /**
     * 
     * @type {number}
     * @memberof ShowDetail
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    language?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShowDetail
     */
    genres: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    status?: string;
    /**
     * 
     * @type {number}
     * @memberof ShowDetail
     */
    runtime?: number;
    /**
     * 
     * @type {number}
     * @memberof ShowDetail
     */
    averageRuntime?: number;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    premiered?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    officialSite?: string;
    /**
     * 
     * @type {ShowDetailSchedule}
     * @memberof ShowDetail
     */
    schedule?: ShowDetailSchedule;
    /**
     * 
     * @type {ShowDetailRating}
     * @memberof ShowDetail
     */
    rating?: ShowDetailRating;
    /**
     * 
     * @type {number}
     * @memberof ShowDetail
     */
    weight?: number;
    /**
     * 
     * @type {Network}
     * @memberof ShowDetail
     */
    network?: Network;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    webChannel?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    dvdCountry?: string;
    /**
     * 
     * @type {ShowDetailExternals}
     * @memberof ShowDetail
     */
    externals?: ShowDetailExternals;
    /**
     * 
     * @type {Image}
     * @memberof ShowDetail
     */
    image?: Image;
    /**
     * 
     * @type {string}
     * @memberof ShowDetail
     */
    summary?: string;
    /**
     * 
     * @type {number}
     * @memberof ShowDetail
     */
    updated?: number;
    /**
     * 
     * @type {ShowDetailLinks}
     * @memberof ShowDetail
     */
    _links?: ShowDetailLinks;
}
/**
 * 
 * @export
 * @interface ShowDetailExternals
 */
export interface ShowDetailExternals {
    /**
     * 
     * @type {number}
     * @memberof ShowDetailExternals
     */
    tvage?: number;
    /**
     * 
     * @type {number}
     * @memberof ShowDetailExternals
     */
    thetvdb?: number;
    /**
     * 
     * @type {string}
     * @memberof ShowDetailExternals
     */
    imdb?: string;
}
/**
 * 
 * @export
 * @interface ShowDetailLinks
 */
export interface ShowDetailLinks {
    /**
     * 
     * @type {ShowDetailLinksSelf}
     * @memberof ShowDetailLinks
     */
    self?: ShowDetailLinksSelf;
    /**
     * 
     * @type {ShowDetailLinksSelf}
     * @memberof ShowDetailLinks
     */
    previousepisode?: ShowDetailLinksSelf;
}
/**
 * 
 * @export
 * @interface ShowDetailLinksSelf
 */
export interface ShowDetailLinksSelf {
    /**
     * 
     * @type {string}
     * @memberof ShowDetailLinksSelf
     */
    href?: string;
}
/**
 * 
 * @export
 * @interface ShowDetailRating
 */
export interface ShowDetailRating {
    /**
     * 
     * @type {number}
     * @memberof ShowDetailRating
     */
    average?: number;
}
/**
 * 
 * @export
 * @interface ShowDetailSchedule
 */
export interface ShowDetailSchedule {
    /**
     * 
     * @type {string}
     * @memberof ShowDetailSchedule
     */
    time?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShowDetailSchedule
     */
    days?: Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get cast of the show
         * @param {any} showId show id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowCast: async (showId: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'showId' is not null or undefined
            assertParamExists('getShowCast', 'showId', showId)
            const localVarPath = `/shows/{showId}/cast`
                .replace(`{${"showId"}}`, encodeURIComponent(String(showId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get show detail
         * @param {any} showId show id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowDetail: async (showId: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'showId' is not null or undefined
            assertParamExists('getShowDetail', 'showId', showId)
            const localVarPath = `/shows/{showId}`
                .replace(`{${"showId"}}`, encodeURIComponent(String(showId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of seasons of the show
         * @param {any} showId show id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowSeasons: async (showId: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'showId' is not null or undefined
            assertParamExists('getShowSeasons', 'showId', showId)
            const localVarPath = `/shows/{showId}/seasons`
                .replace(`{${"showId"}}`, encodeURIComponent(String(showId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search shows
         * @param {any} [q] Fuzzy matching results of query to tv show
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchShows: async (q?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/search/shows/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get cast of the show
         * @param {any} showId show id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShowCast(showId: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CastDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowCast(showId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get show detail
         * @param {any} showId show id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShowDetail(showId: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowDetail(showId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of seasons of the show
         * @param {any} showId show id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShowSeasons(showId: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Season>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowSeasons(showId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search shows
         * @param {any} [q] Fuzzy matching results of query to tv show
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchShows(q?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchShows(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get cast of the show
         * @param {any} showId show id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowCast(showId: any, options?: any): AxiosPromise<Array<CastDetail>> {
            return localVarFp.getShowCast(showId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get show detail
         * @param {any} showId show id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowDetail(showId: any, options?: any): AxiosPromise<ShowDetail> {
            return localVarFp.getShowDetail(showId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of seasons of the show
         * @param {any} showId show id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowSeasons(showId: any, options?: any): AxiosPromise<Array<Season>> {
            return localVarFp.getShowSeasons(showId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search shows
         * @param {any} [q] Fuzzy matching results of query to tv show
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchShows(q?: any, options?: any): AxiosPromise<Array<SearchResult>> {
            return localVarFp.searchShows(q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get cast of the show
     * @param {any} showId show id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShowCast(showId: any, options?: any) {
        return DefaultApiFp(this.configuration).getShowCast(showId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get show detail
     * @param {any} showId show id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShowDetail(showId: any, options?: any) {
        return DefaultApiFp(this.configuration).getShowDetail(showId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of seasons of the show
     * @param {any} showId show id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShowSeasons(showId: any, options?: any) {
        return DefaultApiFp(this.configuration).getShowSeasons(showId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search shows
     * @param {any} [q] Fuzzy matching results of query to tv show
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchShows(q?: any, options?: any) {
        return DefaultApiFp(this.configuration).searchShows(q, options).then((request) => request(this.axios, this.basePath));
    }
}


