{"version":3,"sources":["generated-sources/openapi/base.ts","generated-sources/openapi/common.ts","generated-sources/openapi/api.ts","service/SearchService.ts","components/ShowCard/ShowCard.tsx","components/SearchPage/SearchPage.tsx","components/PictureCard/PictureCard.tsx","service/ShowsService.ts","service/FavoriteService.ts","components/ShowDetailPage/ShowDetailPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","RequiredError","field","msg","name","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","toString","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","DefaultApiFp","localVarAxiosParamCreator","getShowCast","showId","a","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","query","headersFromBaseOptions","headers","getShowDetail","getShowSeasons","searchShows","q","localVarQueryParameter","DefaultApiAxiosParamCreator","localVarAxiosArgs","DefaultApi","then","SearchService","ShowCard","show","className","image","alt","src","medium","genres","join","SearchPage","React","useState","results","setResults","searchQuery","setSearchQuery","location","useLocation","qs","parse","substring","searchShowsApiCall","res","data","useEffect","type","placeholder","value","onChange","e","text","currentTarget","onKeyUp","map","searchResult","to","id","state","redirectUrl","PictureCard","props","imageURL","ShowsService","FavoriteService","JSON","window","localStorage","getItem","getFavorites","favoriteShows","setItem","stringify","FavoriteIcon","icon","favorite","fontSize","style","color","onClick","toggleFavorite","cursor","ShowDetailPage","useParams","showDetail","setShowDetail","cast","setCast","seasons","setSeasons","isFavorite","setFavorite","getCast","getSeasons","addFavorite","removeFavorite","oldVal","dangerouslySetInnerHTML","__html","dompurify","sanitize","summary","horizontal","length","castMember","person","character","season","number","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fca48549.chunk.js","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * TVmaze api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.tvmaze.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * TVmaze api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * TVmaze api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface CastDetail\n */\nexport interface CastDetail {\n    /**\n     * \n     * @type {PersonDetail}\n     * @memberof CastDetail\n     */\n    person: PersonDetail;\n    /**\n     * \n     * @type {CharacterDetail}\n     * @memberof CastDetail\n     */\n    character: CharacterDetail;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CastDetail\n     */\n    self?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CastDetail\n     */\n    voice?: boolean;\n}\n/**\n * \n * @export\n * @interface CharacterDetail\n */\nexport interface CharacterDetail {\n    /**\n     * \n     * @type {number}\n     * @memberof CharacterDetail\n     */\n    id: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CharacterDetail\n     */\n    url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CharacterDetail\n     */\n    name: string;\n    /**\n     * \n     * @type {Image}\n     * @memberof CharacterDetail\n     */\n    image?: Image;\n    /**\n     * \n     * @type {PersonDetailLinks}\n     * @memberof CharacterDetail\n     */\n    _links?: PersonDetailLinks;\n}\n/**\n * \n * @export\n * @interface Country\n */\nexport interface Country {\n    /**\n     * \n     * @type {string}\n     * @memberof Country\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Country\n     */\n    code: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Country\n     */\n    timezone: string;\n}\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    medium: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    original: string;\n}\n/**\n * \n * @export\n * @interface Network\n */\nexport interface Network {\n    /**\n     * \n     * @type {number}\n     * @memberof Network\n     */\n    id: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Network\n     */\n    name: string;\n    /**\n     * \n     * @type {Country}\n     * @memberof Network\n     */\n    country?: Country;\n}\n/**\n * \n * @export\n * @interface PersonDetail\n */\nexport interface PersonDetail {\n    /**\n     * \n     * @type {number}\n     * @memberof PersonDetail\n     */\n    id: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PersonDetail\n     */\n    url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PersonDetail\n     */\n    name: string;\n    /**\n     * \n     * @type {Country}\n     * @memberof PersonDetail\n     */\n    country?: Country;\n    /**\n     * \n     * @type {string}\n     * @memberof PersonDetail\n     */\n    birthday?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PersonDetail\n     */\n    deathday?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PersonDetail\n     */\n    gender: string;\n    /**\n     * \n     * @type {Image}\n     * @memberof PersonDetail\n     */\n    image?: Image;\n    /**\n     * \n     * @type {PersonDetailLinks}\n     * @memberof PersonDetail\n     */\n    _links?: PersonDetailLinks;\n}\n/**\n * \n * @export\n * @interface PersonDetailLinks\n */\nexport interface PersonDetailLinks {\n    /**\n     * \n     * @type {ShowDetailLinksSelf}\n     * @memberof PersonDetailLinks\n     */\n    self?: ShowDetailLinksSelf;\n}\n/**\n * \n * @export\n * @interface SearchResult\n */\nexport interface SearchResult {\n    /**\n     * \n     * @type {number}\n     * @memberof SearchResult\n     */\n    score: number;\n    /**\n     * \n     * @type {ShowDetail}\n     * @memberof SearchResult\n     */\n    show: ShowDetail;\n}\n/**\n * \n * @export\n * @interface Season\n */\nexport interface Season {\n    /**\n     * \n     * @type {number}\n     * @memberof Season\n     */\n    id: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Season\n     */\n    url: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Season\n     */\n    number: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Season\n     */\n    name?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Season\n     */\n    episodeOrder?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Season\n     */\n    premiereDate: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Season\n     */\n    endDate: string;\n    /**\n     * \n     * @type {Network}\n     * @memberof Season\n     */\n    network?: Network;\n    /**\n     * \n     * @type {string}\n     * @memberof Season\n     */\n    webChannel?: string;\n    /**\n     * \n     * @type {Image}\n     * @memberof Season\n     */\n    image?: Image;\n    /**\n     * \n     * @type {string}\n     * @memberof Season\n     */\n    summary?: string;\n    /**\n     * \n     * @type {PersonDetailLinks}\n     * @memberof Season\n     */\n    _links?: PersonDetailLinks;\n}\n/**\n * \n * @export\n * @interface ShowDetail\n */\nexport interface ShowDetail {\n    /**\n     * \n     * @type {number}\n     * @memberof ShowDetail\n     */\n    id: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    url: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    language?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ShowDetail\n     */\n    genres: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    status?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ShowDetail\n     */\n    runtime?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ShowDetail\n     */\n    averageRuntime?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    premiered?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    officialSite?: string;\n    /**\n     * \n     * @type {ShowDetailSchedule}\n     * @memberof ShowDetail\n     */\n    schedule?: ShowDetailSchedule;\n    /**\n     * \n     * @type {ShowDetailRating}\n     * @memberof ShowDetail\n     */\n    rating?: ShowDetailRating;\n    /**\n     * \n     * @type {number}\n     * @memberof ShowDetail\n     */\n    weight?: number;\n    /**\n     * \n     * @type {Network}\n     * @memberof ShowDetail\n     */\n    network?: Network;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    webChannel?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    dvdCountry?: string;\n    /**\n     * \n     * @type {ShowDetailExternals}\n     * @memberof ShowDetail\n     */\n    externals?: ShowDetailExternals;\n    /**\n     * \n     * @type {Image}\n     * @memberof ShowDetail\n     */\n    image?: Image;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetail\n     */\n    summary?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ShowDetail\n     */\n    updated?: number;\n    /**\n     * \n     * @type {ShowDetailLinks}\n     * @memberof ShowDetail\n     */\n    _links?: ShowDetailLinks;\n}\n/**\n * \n * @export\n * @interface ShowDetailExternals\n */\nexport interface ShowDetailExternals {\n    /**\n     * \n     * @type {number}\n     * @memberof ShowDetailExternals\n     */\n    tvage?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ShowDetailExternals\n     */\n    thetvdb?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetailExternals\n     */\n    imdb?: string;\n}\n/**\n * \n * @export\n * @interface ShowDetailLinks\n */\nexport interface ShowDetailLinks {\n    /**\n     * \n     * @type {ShowDetailLinksSelf}\n     * @memberof ShowDetailLinks\n     */\n    self?: ShowDetailLinksSelf;\n    /**\n     * \n     * @type {ShowDetailLinksSelf}\n     * @memberof ShowDetailLinks\n     */\n    previousepisode?: ShowDetailLinksSelf;\n}\n/**\n * \n * @export\n * @interface ShowDetailLinksSelf\n */\nexport interface ShowDetailLinksSelf {\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetailLinksSelf\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface ShowDetailRating\n */\nexport interface ShowDetailRating {\n    /**\n     * \n     * @type {number}\n     * @memberof ShowDetailRating\n     */\n    average?: number;\n}\n/**\n * \n * @export\n * @interface ShowDetailSchedule\n */\nexport interface ShowDetailSchedule {\n    /**\n     * \n     * @type {string}\n     * @memberof ShowDetailSchedule\n     */\n    time?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ShowDetailSchedule\n     */\n    days?: Array<string>;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Get cast of the show\n         * @param {any} showId show id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getShowCast: async (showId: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'showId' is not null or undefined\n            assertParamExists('getShowCast', 'showId', showId)\n            const localVarPath = `/shows/{showId}/cast`\n                .replace(`{${\"showId\"}}`, encodeURIComponent(String(showId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get show detail\n         * @param {any} showId show id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getShowDetail: async (showId: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'showId' is not null or undefined\n            assertParamExists('getShowDetail', 'showId', showId)\n            const localVarPath = `/shows/{showId}`\n                .replace(`{${\"showId\"}}`, encodeURIComponent(String(showId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get list of seasons of the show\n         * @param {any} showId show id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getShowSeasons: async (showId: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'showId' is not null or undefined\n            assertParamExists('getShowSeasons', 'showId', showId)\n            const localVarPath = `/shows/{showId}/seasons`\n                .replace(`{${\"showId\"}}`, encodeURIComponent(String(showId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Search shows\n         * @param {any} [q] Fuzzy matching results of query to tv show\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchShows: async (q?: any, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/search/shows/`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (q !== undefined) {\n                localVarQueryParameter['q'] = q;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Get cast of the show\n         * @param {any} showId show id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getShowCast(showId: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CastDetail>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowCast(showId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get show detail\n         * @param {any} showId show id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getShowDetail(showId: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowDetail>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowDetail(showId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get list of seasons of the show\n         * @param {any} showId show id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getShowSeasons(showId: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Season>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowSeasons(showId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Search shows\n         * @param {any} [q] Fuzzy matching results of query to tv show\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async searchShows(q?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchResult>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.searchShows(q, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Get cast of the show\n         * @param {any} showId show id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getShowCast(showId: any, options?: any): AxiosPromise<Array<CastDetail>> {\n            return localVarFp.getShowCast(showId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get show detail\n         * @param {any} showId show id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getShowDetail(showId: any, options?: any): AxiosPromise<ShowDetail> {\n            return localVarFp.getShowDetail(showId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get list of seasons of the show\n         * @param {any} showId show id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getShowSeasons(showId: any, options?: any): AxiosPromise<Array<Season>> {\n            return localVarFp.getShowSeasons(showId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Search shows\n         * @param {any} [q] Fuzzy matching results of query to tv show\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchShows(q?: any, options?: any): AxiosPromise<Array<SearchResult>> {\n            return localVarFp.searchShows(q, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * \n     * @summary Get cast of the show\n     * @param {any} showId show id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getShowCast(showId: any, options?: any) {\n        return DefaultApiFp(this.configuration).getShowCast(showId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get show detail\n     * @param {any} showId show id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getShowDetail(showId: any, options?: any) {\n        return DefaultApiFp(this.configuration).getShowDetail(showId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get list of seasons of the show\n     * @param {any} showId show id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getShowSeasons(showId: any, options?: any) {\n        return DefaultApiFp(this.configuration).getShowSeasons(showId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Search shows\n     * @param {any} [q] Fuzzy matching results of query to tv show\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public searchShows(q?: any, options?: any) {\n        return DefaultApiFp(this.configuration).searchShows(q, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","import { AxiosPromise } from \"axios\";\r\nimport { DefaultApi, SearchResult } from \"../generated-sources/openapi/api\";\r\n\r\n/**\r\n * Search shows by name from TV Maze API\r\n */\r\nexport class SearchService {\r\n  static searchShows(query?: string): AxiosPromise<Array<SearchResult>> {\r\n    return new DefaultApi().searchShows(query);\r\n  }\r\n}\r\n","import { SearchResult } from \"../../generated-sources/openapi/api\";\r\nimport \"./ShowCard.scss\";\r\n\r\nconst ShowCard: React.FC<{ show: SearchResult }> = ({ show }) => {\r\n  return (\r\n    <div className=\"show-card my-3\">\r\n      {show.show.image ? (\r\n        <img\r\n          className=\"image\"\r\n          alt={show.show.name}\r\n          src={show.show.image?.medium}\r\n        />\r\n      ) : (\r\n        <div className=\"image image-substitute\"></div>\r\n      )}\r\n      <div className=\"mt-3\">\r\n        <div className=\"name\">{show.show.name}</div>\r\n        <div className=\"genre\">{show.show.genres?.join(\", \")}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowCard;\r\n","import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { SearchResult } from \"../../generated-sources/openapi/api\";\r\nimport { SearchService } from \"../../service/SearchService\";\r\nimport ShowCard from \"../ShowCard/ShowCard\";\r\nimport \"./SearchPage.scss\";\r\nimport qs from \"qs\";\r\n\r\nconst SearchPage: React.FC<{}> = () => {\r\n  const [results, setResults] = React.useState<Array<SearchResult>>([]);\r\n  const [searchQuery, setSearchQuery] = React.useState<string>();\r\n\r\n  const location = useLocation();\r\n  const { query } = qs.parse(location.search.substring(1));\r\n\r\n  const searchShowsApiCall = (query: string) => {\r\n    SearchService.searchShows(query).then((res) => {\r\n      setResults(res.data);\r\n    });\r\n  };\r\n\r\n  const handleEnterKeyPressOnSearch = (\r\n    e: React.KeyboardEvent<HTMLInputElement>\r\n  ) => {\r\n    if (e.key === \"Enter\") {\r\n      searchShowsApiCall(e.currentTarget.value);\r\n    }\r\n  };\r\n\r\n  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const text = e.currentTarget.value;\r\n    setSearchQuery(text);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setSearchQuery(query as string);\r\n    searchShowsApiCall((query as string) || \"\");\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className=\"search-results-page\">\r\n      <div className=\"row\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control search-bar\"\r\n          placeholder=\"Search for a TV show\"\r\n          value={searchQuery}\r\n          onChange={handleTextChange}\r\n          onKeyUp={handleEnterKeyPressOnSearch}\r\n        />\r\n      </div>\r\n      <div className=\"row row-col\">\r\n        {results.map((searchResult) => (\r\n          <div\r\n            key={searchResult.show.id}\r\n            className=\"col-4 d-flex justify-content-center\"\r\n          >\r\n            <Link\r\n              to={{\r\n                pathname: `shows/${searchResult.show.id}`,\r\n                state: { redirectUrl: `/?query=${searchQuery}` },\r\n              }}\r\n            >\r\n              <ShowCard show={searchResult} />\r\n            </Link>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n","import * as React from \"react\";\r\nimport \"./PictureCard.scss\";\r\n\r\nexport interface PictureCardProps {\r\n  imageURL?: string;\r\n  text: string;\r\n}\r\n\r\nconst PictureCard: React.FC<PictureCardProps> = (props) => {\r\n  return (\r\n    <div className=\"picture-card\">\r\n      {props.imageURL ? (\r\n        <img className=\"image\" alt={props.text} src={props.imageURL} />\r\n      ) : (\r\n        <div className=\"image image-substitute\"></div>\r\n      )}\r\n      <div className=\"mt-3\">{props.text}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PictureCard;\r\n","import { AxiosPromise } from \"axios\";\r\nimport {\r\n  CastDetail,\r\n  DefaultApi,\r\n  Season,\r\n  ShowDetail,\r\n} from \"../generated-sources/openapi/api\";\r\n\r\n/**\r\n * Show services from TV Maze API\r\n */\r\nexport class ShowsService {\r\n  static getShowDetail(showId: number): AxiosPromise<ShowDetail> {\r\n    return new DefaultApi().getShowDetail(showId);\r\n  }\r\n\r\n  static getCast(showId: number): AxiosPromise<Array<CastDetail>> {\r\n    return new DefaultApi().getShowCast(showId);\r\n  }\r\n\r\n  static getSeasons(showId: number): AxiosPromise<Array<Season>> {\r\n    return new DefaultApi().getShowSeasons(showId);\r\n  }\r\n}\r\n","/**\r\n * Save favorite TV shows on local storage\r\n */\r\nexport default class FavoriteService {\r\n  static getFavorites(): { [showId: number]: string } {\r\n    return JSON.parse(window.localStorage.getItem(\"favorites\") || \"{}\");\r\n  }\r\n\r\n  static isFavorite(showId: number): boolean {\r\n    return !!FavoriteService.getFavorites()[showId];\r\n  }\r\n\r\n  static addFavorite(showId: number) {\r\n    const favoriteShows = FavoriteService.getFavorites();\r\n    favoriteShows[showId] = showId + \"\";\r\n    window.localStorage.setItem(\"favorites\", JSON.stringify(favoriteShows));\r\n  }\r\n\r\n  static removeFavorite(showId: number) {\r\n    const favoriteShows = FavoriteService.getFavorites();\r\n    delete favoriteShows[showId];\r\n    window.localStorage.setItem(\"favorites\", JSON.stringify(favoriteShows));\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link, useLocation, useParams } from \"react-router-dom\";\r\nimport {\r\n  CastDetail,\r\n  Season,\r\n  ShowDetail,\r\n} from \"../../generated-sources/openapi\";\r\nimport PictureCard from \"../PictureCard/PictureCard\";\r\nimport { ShowsService } from \"../../service/ShowsService\";\r\nimport StarBorderRoundedIcon from \"@material-ui/icons/StarBorderRounded\";\r\nimport StarRoundedIcon from \"@material-ui/icons/StarRounded\";\r\nimport \"./ShowDetailPage.scss\";\r\nimport FavoriteService from \"../../service/FavoriteService\";\r\nimport dompurify from \"dompurify\";\r\nimport ScrollContainer from \"react-indiana-drag-scroll\";\r\n\r\ninterface FavoriteIconProps {\r\n  favorite: boolean;\r\n  toggleFavorite: () => void;\r\n}\r\n\r\nconst FavoriteIcon: React.FC<FavoriteIconProps> = (props) => {\r\n  const icon = props.favorite ? (\r\n    <StarRoundedIcon fontSize=\"large\" style={{ color: \"gold\" }} />\r\n  ) : (\r\n    <StarBorderRoundedIcon fontSize=\"large\" style={{ color: \"grey\" }} />\r\n  );\r\n\r\n  return (\r\n    <div onClick={props.toggleFavorite} style={{ cursor: \"pointer\" }}>\r\n      {icon}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ShowDetailPage: React.FC<{}> = () => {\r\n  const { showId } = useParams<{ showId: string }>();\r\n  const location = useLocation<{ redirectUrl: string }>();\r\n\r\n  const [showDetail, setShowDetail] = React.useState<ShowDetail>();\r\n  const [cast, setCast] = React.useState<Array<CastDetail>>([]);\r\n  const [seasons, setSeasons] = React.useState<Array<Season>>([]);\r\n  const [favorite, setFavorite] = React.useState<boolean>(\r\n    FavoriteService.isFavorite(+showId)\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    ShowsService.getShowDetail(+showId)\r\n      .then((res) => {\r\n        setShowDetail(res.data);\r\n      })\r\n      .then(() => {\r\n        ShowsService.getCast(+showId).then((res) => {\r\n          setCast(res.data);\r\n        });\r\n        ShowsService.getSeasons(+showId).then((res) => {\r\n          setSeasons(res.data);\r\n        });\r\n      });\r\n  }, [showId]);\r\n\r\n  React.useEffect(() => {\r\n    if (favorite) {\r\n      FavoriteService.addFavorite(+showId);\r\n    } else {\r\n      FavoriteService.removeFavorite(+showId);\r\n    }\r\n  }, [showId, favorite]);\r\n\r\n  return (\r\n    <div className=\"d-flex mt-4 show-detail-page\">\r\n      <div className=\"back-link\">\r\n        <Link to={`${location.state.redirectUrl}`}>Back</Link>\r\n      </div>\r\n      <div className=\"main-content ps-2\">\r\n        <div className=\"row mb-4\">\r\n          <div className=\"d-flex mb-4 align-items-end\">\r\n            <img\r\n              src={showDetail?.image?.medium}\r\n              alt={showDetail?.name}\r\n              className=\"main-image me-2\"\r\n            />\r\n            <div className=\"h1 mb-0\">{showDetail?.name}</div>\r\n            <FavoriteIcon\r\n              favorite={favorite}\r\n              toggleFavorite={() => setFavorite((oldVal) => !oldVal)}\r\n            />\r\n          </div>\r\n          <div\r\n            dangerouslySetInnerHTML={{\r\n              __html: dompurify.sanitize(showDetail?.summary || \"\"),\r\n            }}\r\n          ></div>\r\n        </div>\r\n        <div className=\"row mb-4\">\r\n          <h2 className=\"mb-3\">Cast</h2>\r\n          <ScrollContainer className=\"scroll-container\" horizontal={true}>\r\n            <div className=\"d-flex\">\r\n              {cast.length === 0 && <div>No data</div>}\r\n              {cast.map((castMember) => (\r\n                <div className=\"me-3\" key={castMember.character.id}>\r\n                  <PictureCard\r\n                    imageURL={castMember.person.image?.medium}\r\n                    text={castMember.person.name}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </ScrollContainer>\r\n        </div>\r\n        <div className=\"row mb-4\">\r\n          <div className=\"h2 mb-3\">Seasons</div>\r\n          <ScrollContainer className=\"scroll-container\" horizontal={true}>\r\n            <div className=\"picture-scroll d-flex\">\r\n              {seasons.length === 0 && <div>No data</div>}\r\n              {seasons.map((season) => (\r\n                <div className=\"me-3\" key={season.number}>\r\n                  <PictureCard\r\n                    imageURL={season.image?.medium}\r\n                    text={`Season ${season.number}`}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </ScrollContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowDetailPage;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.scss\";\r\nimport SearchPage from \"./components/SearchPage/SearchPage\";\r\nimport ShowDetailPage from \"./components/ShowDetailPage/ShowDetailPage\";\r\n\r\nconst App: React.FC<{}> = () => {\r\n  return (\r\n    <div className=\"container my-4\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/shows/:showId\">\r\n            <ShowDetailPage />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <SearchPage />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}